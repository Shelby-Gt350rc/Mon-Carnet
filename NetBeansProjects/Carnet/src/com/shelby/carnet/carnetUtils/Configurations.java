/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.shelby.carnet.carnetUtils;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Patrick-Noah
 */
public class Configurations extends javax.swing.JFrame {
    
    /**
     * Creates new form Login
     */
    public Configurations() {
        initComponents();
         centerEcran("Configuration"); 
        sgbdLbl.setVisible(false);
        winOsRbtn.setVisible(false);
        linOsRbtn.setVisible(false); 
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpBtn = new javax.swing.ButtonGroup();
        boiteGlobale = new javax.swing.JPanel();
        logoLbl = new javax.swing.JLabel();
        emplacementLbl = new javax.swing.JLabel();
        sauvegardeCBox = new javax.swing.JComboBox();
        sgbdLbl = new javax.swing.JLabel();
        winOsRbtn = new javax.swing.JRadioButton();
        linOsRbtn = new javax.swing.JRadioButton();
        separation = new javax.swing.JSeparator();
        titreLbl = new javax.swing.JLabel();
        loginLbl = new javax.swing.JLabel();
        loginTfld = new javax.swing.JTextField();
        pwdLbl = new javax.swing.JLabel();
        pwdTfld = new javax.swing.JPasswordField();
        precedentBtn = new javax.swing.JButton();
        installerBtn = new javax.swing.JButton();
        quitterBtn = new javax.swing.JButton();
        infosPnl = new javax.swing.JPanel();
        verionInfosLbl = new javax.swing.JLabel();
        fabricantInfosLbl = new javax.swing.JLabel();
        configFondLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N
        getContentPane().setLayout(null);

        boiteGlobale.setBorder(null);
        boiteGlobale.setName("boiteGlobale"); // NOI18N
        boiteGlobale.setLayout(null);

        logoLbl.setFont(new java.awt.Font("Palatino Linotype", 0, 14)); // NOI18N
        logoLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/shelby/carnet/carnetUtils/resources/aboutCarnetdb.png"))); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(carnet.CarnetApp.class).getContext().getResourceMap(Configurations.class);
        logoLbl.setText(resourceMap.getString("logoLbl.text")); // NOI18N
        logoLbl.setName("logoLbl"); // NOI18N
        boiteGlobale.add(logoLbl);
        logoLbl.setBounds(0, 10, 128, 119);

        emplacementLbl.setFont(new java.awt.Font("LM Roman Dunhill 10", 1, 18)); // NOI18N
        emplacementLbl.setForeground(java.awt.Color.white);
        emplacementLbl.setText(resourceMap.getString("emplacementLbl.text")); // NOI18N
        emplacementLbl.setToolTipText(resourceMap.getString("emplacementLbl.toolTipText")); // NOI18N
        emplacementLbl.setName("emplacementLbl"); // NOI18N
        boiteGlobale.add(emplacementLbl);
        emplacementLbl.setBounds(120, 40, 80, 32);

        sauvegardeCBox.setFont(new java.awt.Font("LM Roman Dunhill 10", 1, 15)); // NOI18N
        sauvegardeCBox.setForeground(new java.awt.Color(0, 0, 204));
        sauvegardeCBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fichier txt", "SGBD-Mysql", "SGBD-Postgresql", "SGBD-Oracle 11g", "SGBD-FichierTxt" }));
        sauvegardeCBox.setName("sauvegardeCBox"); // NOI18N
        sauvegardeCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sauvegardeCBoxActionPerformed(evt);
            }
        });
        boiteGlobale.add(sauvegardeCBox);
        sauvegardeCBox.setBounds(220, 40, 161, 29);

        sgbdLbl.setFont(new java.awt.Font("LM Roman Dunhill 10", 1, 18)); // NOI18N
        sgbdLbl.setForeground(java.awt.Color.white);
        sgbdLbl.setText(resourceMap.getString("sgbdLbl.text")); // NOI18N
        sgbdLbl.setToolTipText(resourceMap.getString("sgbdLbl.toolTipText")); // NOI18N
        sgbdLbl.setName("sgbdLbl"); // NOI18N
        boiteGlobale.add(sgbdLbl);
        sgbdLbl.setBounds(120, 80, 21, 22);

        winOsRbtn.setFont(new java.awt.Font("LM Roman Dunhill 10", 1, 15)); // NOI18N
        winOsRbtn.setForeground(new java.awt.Color(0, 0, 204));
        winOsRbtn.setText(resourceMap.getString("winOsRbtn.text")); // NOI18N
        winOsRbtn.setToolTipText(resourceMap.getString("winOsRbtn.toolTipText")); // NOI18N
        winOsRbtn.setName("winOsRbtn"); // NOI18N
        boiteGlobale.add(winOsRbtn);
        winOsRbtn.setBounds(220, 80, 76, 21);

        linOsRbtn.setFont(new java.awt.Font("LM Roman Dunhill 10", 1, 15)); // NOI18N
        linOsRbtn.setForeground(new java.awt.Color(0, 0, 204));
        linOsRbtn.setText(resourceMap.getString("linOsRbtn.text")); // NOI18N
        linOsRbtn.setToolTipText(resourceMap.getString("linOsRbtn.toolTipText")); // NOI18N
        linOsRbtn.setName("linOsRbtn"); // NOI18N
        boiteGlobale.add(linOsRbtn);
        linOsRbtn.setBounds(300, 80, 69, 21);

        separation.setName("separation"); // NOI18N
        boiteGlobale.add(separation);
        separation.setBounds(152, 104, 368, 2);

        titreLbl.setFont(new java.awt.Font("LM Roman Dunhill 10", 1, 18)); // NOI18N
        titreLbl.setForeground(new java.awt.Color(0, 0, 204));
        titreLbl.setText(resourceMap.getString("titreLbl.text")); // NOI18N
        titreLbl.setToolTipText(resourceMap.getString("titreLbl.toolTipText")); // NOI18N
        titreLbl.setName("titreLbl"); // NOI18N
        boiteGlobale.add(titreLbl);
        titreLbl.setBounds(310, 110, 109, 20);

        loginLbl.setFont(new java.awt.Font("LM Roman Dunhill 10", 1, 18)); // NOI18N
        loginLbl.setForeground(java.awt.Color.white);
        loginLbl.setText(resourceMap.getString("loginLbl.text")); // NOI18N
        loginLbl.setToolTipText(resourceMap.getString("loginLbl.toolTipText")); // NOI18N
        loginLbl.setName("loginLbl"); // NOI18N
        boiteGlobale.add(loginLbl);
        loginLbl.setBounds(160, 140, 103, 22);

        loginTfld.setFont(new java.awt.Font("Palatino Linotype", 0, 14)); // NOI18N
        loginTfld.setName("loginTfld"); // NOI18N
        loginTfld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                loginTfldKeyReleased(evt);
            }
        });
        boiteGlobale.add(loginTfld);
        loginTfld.setBounds(270, 140, 174, 32);

        pwdLbl.setFont(new java.awt.Font("LM Roman Dunhill 10", 1, 18)); // NOI18N
        pwdLbl.setForeground(resourceMap.getColor("pwdLbl.foreground")); // NOI18N
        pwdLbl.setText(resourceMap.getString("pwdLbl.text")); // NOI18N
        pwdLbl.setToolTipText(resourceMap.getString("pwdLbl.toolTipText")); // NOI18N
        pwdLbl.setName("pwdLbl"); // NOI18N
        boiteGlobale.add(pwdLbl);
        pwdLbl.setBounds(160, 180, 105, 32);

        pwdTfld.setFont(new java.awt.Font("Palatino Linotype", 0, 14)); // NOI18N
        pwdTfld.setName("pwdTfld"); // NOI18N
        pwdTfld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pwdTfldKeyReleased(evt);
            }
        });
        boiteGlobale.add(pwdTfld);
        pwdTfld.setBounds(270, 180, 174, 32);

        precedentBtn.setFont(new java.awt.Font("LM Roman Dunhill 10", 1, 16)); // NOI18N
        precedentBtn.setText(resourceMap.getString("precedentBtn.text")); // NOI18N
        precedentBtn.setName("precedentBtn"); // NOI18N
        precedentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precedentBtnActionPerformed(evt);
            }
        });
        boiteGlobale.add(precedentBtn);
        precedentBtn.setBounds(290, 220, 46, 30);

        installerBtn.setFont(new java.awt.Font("LM Roman Dunhill 10", 1, 16)); // NOI18N
        installerBtn.setText(resourceMap.getString("installerBtn.text")); // NOI18N
        installerBtn.setToolTipText(resourceMap.getString("installerBtn.toolTipText")); // NOI18N
        installerBtn.setName("installerBtn"); // NOI18N
        installerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installerBtnActionPerformed(evt);
            }
        });
        boiteGlobale.add(installerBtn);
        installerBtn.setBounds(340, 220, 55, 30);

        quitterBtn.setFont(new java.awt.Font("LM Roman Dunhill 10", 1, 16)); // NOI18N
        quitterBtn.setText(resourceMap.getString("quitterBtn.text")); // NOI18N
        quitterBtn.setToolTipText(resourceMap.getString("quitterBtn.toolTipText")); // NOI18N
        quitterBtn.setName("quitterBtn"); // NOI18N
        quitterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterBtnActionPerformed(evt);
            }
        });
        boiteGlobale.add(quitterBtn);
        quitterBtn.setBounds(400, 220, 43, 30);

        infosPnl.setFont(new java.awt.Font("LM Roman Dunhill 10", 0, 15)); // NOI18N
        infosPnl.setName("infosPnl"); // NOI18N
        infosPnl.setOpaque(false);

        verionInfosLbl.setFont(new java.awt.Font("LM Roman Dunhill 10", 0, 15)); // NOI18N
        verionInfosLbl.setForeground(new java.awt.Color(255, 255, 255));
        verionInfosLbl.setText(resourceMap.getString("verionInfosLbl.text")); // NOI18N
        verionInfosLbl.setName("verionInfosLbl"); // NOI18N

        fabricantInfosLbl.setFont(new java.awt.Font("LM Roman Dunhill 10", 0, 15)); // NOI18N
        fabricantInfosLbl.setForeground(new java.awt.Color(255, 255, 255));
        fabricantInfosLbl.setText(resourceMap.getString("fabricantInfosLbl.text")); // NOI18N
        fabricantInfosLbl.setName("fabricantInfosLbl"); // NOI18N

        javax.swing.GroupLayout infosPnlLayout = new javax.swing.GroupLayout(infosPnl);
        infosPnl.setLayout(infosPnlLayout);
        infosPnlLayout.setHorizontalGroup(
            infosPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infosPnlLayout.createSequentialGroup()
                .addComponent(verionInfosLbl)
                .addGap(67, 67, 67)
                .addComponent(fabricantInfosLbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        infosPnlLayout.setVerticalGroup(
            infosPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infosPnlLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(infosPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verionInfosLbl)
                    .addComponent(fabricantInfosLbl)))
        );

        boiteGlobale.add(infosPnl);
        infosPnl.setBounds(12, 251, 440, 31);

        configFondLbl.setIcon(resourceMap.getIcon("configFondLbl.icon")); // NOI18N
        configFondLbl.setText(resourceMap.getString("configFondLbl.text")); // NOI18N
        configFondLbl.setName("configFondLbl"); // NOI18N
        boiteGlobale.add(configFondLbl);
        configFondLbl.setBounds(0, 0, 450, 280);

        getContentPane().add(boiteGlobale);
        boiteGlobale.setBounds(0, 12, 450, 280);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void quitterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterBtnActionPerformed
       String[] confirmation = {"Oui", "Non"}; 
    int rang;
      rang = JOptionPane.showOptionDialog(null, "Voulez-vous annuler l'installation?", "Quitter IceBook v1.0.3 !",
                 JOptionPane.YES_NO_OPTION, JOptionPane.OK_OPTION,
                null,  confirmation, confirmation[1]);
      String selectionner=confirmation[rang];
      if("Oui".equals(selectionner)){
        System.exit(0);
      }  
    }//GEN-LAST:event_quitterBtnActionPerformed
    
    private void installerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installerBtnActionPerformed
        //debut installation et verification des informations
        validation();
    }//GEN-LAST:event_installerBtnActionPerformed
    
    private void pwdTfldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pwdTfldKeyReleased
        //appel de la methode validation après le relachement de la touche Enter
        if(evt.getKeyCode()==10){
            validation();
        }
    }//GEN-LAST:event_pwdTfldKeyReleased
    
    private void loginTfldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loginTfldKeyReleased
        //appel de la methode validation après le relachement de la touche Enter
        if(evt.getKeyCode()==10){
            validation();
        }
    }//GEN-LAST:event_loginTfldKeyReleased
    
    private void sauvegardeCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sauvegardeCBoxActionPerformed
        String localisation;
        if("Fichier txt".equals(sauvegardeCBox.getSelectedItem())){
            sgbdLbl.setVisible(false);
            winOsRbtn.setVisible(false);
            linOsRbtn.setVisible(false); 
            localisation="Fichier texte";
            setEmplacement(localisation);
        }else{
            if("SGBD-Mysql".equals(sauvegardeCBox.getSelectedItem())){
                sgbdLbl.setVisible(false);
                winOsRbtn.setVisible(false);
                linOsRbtn.setVisible(false); 
                localisation="SGBD-Mysql";
                setEmplacement(localisation);
            }else{
                if("SGBD-Postgresql".equals(sauvegardeCBox.getSelectedItem())){
                    sgbdLbl.setVisible(false);
                    winOsRbtn.setVisible(false);
                    linOsRbtn.setVisible(false); 
                    localisation="SGBD-Postgresql";
                    setEmplacement(localisation);
                }else{
                    if("SGBD-Oracle 11g".equals(sauvegardeCBox.getSelectedItem())){
                        sgbdLbl.setVisible(false);
                        winOsRbtn.setVisible(false);
                        linOsRbtn.setVisible(false); 
                        localisation="SGBD-Oracle 11g";
                        setEmplacement(localisation);
                    }else{
                        localisation="SGBD-FichierTxt";
                        setEmplacement(localisation);
                        grpBtn.add(winOsRbtn);
                        grpBtn.add(linOsRbtn); 
                        sgbdLbl.setVisible(true);
                        winOsRbtn.setVisible(true);
                        linOsRbtn.setVisible(true); 
                        winOsRbtn.setSelected(true);
                    }
                }
            }
        }
    }//GEN-LAST:event_sauvegardeCBoxActionPerformed
    
    private void precedentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precedentBtnActionPerformed
        // Action sur le bouton precedent
        dispose();
        Install installation = new Install();
        installation.setVisible(true);
        installation.estSelectionner(true);
    }//GEN-LAST:event_precedentBtnActionPerformed
    
    private String emplacement;
    private String database;
    private String databaseChoisie;
    private String login;
    private String motdepasse;
    private String loginSaisie ;
    private String pwdSaisie;
    String informations = getLogin()+";"+getMotdepasse()+";"+getDatabase()+";"+getDatabaseChoisie();
    
    private static boolean outExiste;
    private static String fichierConfig;
    private static String fichierBatch;
    private static String fichierBatchImage;
    private static String fichierDatabaseContacts;
    private static String fichierDatabaseComptes;
    private static String fichierDatabaseCompteHisto;
    private static String fichierDatabaseContactsHisto;
    private static FileReader in = null;
    private static FileWriter out = null;
    private static FileWriter outFileBatch=null;
    private static FileWriter outImageFileBatch=null;
    private static FileWriter outFile = null;
    private static FileWriter outFileDb =  null;
    private static FileWriter outFileCompteHisto = null;
    private static FileWriter outFileContactsHisto = null;
    private static String libFin ;
    private static String dossierConfig = "C:\\IceDatabase/Carnetdb/config";
    private static String dossierIcons = "C:\\IceDatabase/Carnetdb/icons";
    private static String dossierImages = "C:\\IceDatabase/Carnetdb/images";
    private static String dossierDatabase = "C:\\IceDatabase/Carnetdb/data";
    private String urlDatabase ;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boiteGlobale;
    private javax.swing.JLabel configFondLbl;
    private javax.swing.JLabel emplacementLbl;
    private javax.swing.JLabel fabricantInfosLbl;
    private javax.swing.ButtonGroup grpBtn;
    private javax.swing.JPanel infosPnl;
    private javax.swing.JButton installerBtn;
    private javax.swing.JRadioButton linOsRbtn;
    private javax.swing.JLabel loginLbl;
    private javax.swing.JTextField loginTfld;
    private javax.swing.JLabel logoLbl;
    private javax.swing.JButton precedentBtn;
    private javax.swing.JLabel pwdLbl;
    private javax.swing.JPasswordField pwdTfld;
    private javax.swing.JButton quitterBtn;
    private javax.swing.JComboBox sauvegardeCBox;
    private javax.swing.JSeparator separation;
    private javax.swing.JLabel sgbdLbl;
    private javax.swing.JLabel titreLbl;
    private javax.swing.JLabel verionInfosLbl;
    private javax.swing.JRadioButton winOsRbtn;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Methode qui nous permet de réinitialiser
     * les valeurs de connexion
     */
    private void reinitialiser() {
        loginTfld.setText("");
        pwdTfld.setText("");
    }
    
    /**
     * Methode qui nous permet de valider
     * les valeurs de connexion
     */
    private void validation() {
        char[] pwdTab = pwdTfld.getPassword();
        pwdSaisie = String.copyValueOf(pwdTab);
        loginSaisie = loginTfld.getText();
        if ("".equals(loginSaisie) && "".equals(pwdSaisie)) {
            JOptionPane.showMessageDialog(null,
                    "Veillez inserer vos future  identifiants!!!",
                    "Informations réquises",
                    JOptionPane.INFORMATION_MESSAGE);
        }else{
            if("SGBD-FichierTxt".equals(sauvegardeCBox.getSelectedItem())){ sgbdChoisie();}
            dispose();
            setConfig();
            myDatabaseTxt();
            System.out.println("Url : "+getUrlDatabase());
            chargement(); 
        }
        
    }
    
    public String getEmplacement() {
        return emplacement;
    }
    
    public void setEmplacement(String emplacement) {
        this.emplacement = emplacement;
    }
    
    /* Chargement */
    static JFrame parentFrame;
    private static void chargement(){
        Chargement BarProg = new Chargement(parentFrame);
        Chargement.lcmt(BarProg);
    }
    
    public String getDatabase() {
        return database;
    }
    
    public void setDatabase(String database) {
        this.database = database;
    }
    
    public String getDatabaseChoisie() {
        return databaseChoisie;
    }
    
    public void setDatabaseChoisie(String databaseChoisie) {
        this.databaseChoisie = databaseChoisie;
    }
    
    private void setConfig() {
        setLogin(loginSaisie);
        setMotdepasse(pwdSaisie);
        setDatabase((String)sauvegardeCBox.getSelectedItem());
        System.out.println(" Login : "+getLogin()+"\n"
                + "Pwd :"+getMotdepasse()+"\n"
                + "Database :"+getDatabase());
    }
    private void sgbdChoisie(){
        if(winOsRbtn.isSelected()){
            setDatabaseChoisie("Mysql");
        }else{
            if(linOsRbtn.isSelected()){
                setDatabaseChoisie("Postgresql");
            }else{
                setDatabaseChoisie("Oracle 11 g");
            }
        }
        System.out.println(" db : "+getDatabaseChoisie());
    }
    
    
    
    private void myDatabaseTxt() {
        
        if (!new File(dossierConfig).exists()|| !new File(dossierDatabase).exists() || !new File(dossierIcons).exists() || !new File(dossierImages).exists())//teste si le dossierConfig existe
        {// Créer le dossierConfig avec tous ses parents
            new File(dossierConfig).mkdirs();
            new File(dossierDatabase).mkdirs();
            new File(dossierIcons).mkdirs(); 
            new File(dossierImages).mkdirs();
            //Creation du fichier.txt dans le dossierConfig créer
            fichierConfig = dossierConfig + "/" + "iceConfigdb.txt";
            fichierBatch= dossierConfig +"/"+"transfertImage.bat";
            fichierBatchImage= dossierConfig +"/"+"uploadImage.bat";
            fichierDatabaseContacts = dossierDatabase+"/"+"listeContacts.txt";
             fichierDatabaseComptes= dossierDatabase+"/"+"listeComptes.txt";
             fichierDatabaseCompteHisto= dossierDatabase+"/"+"historiquecomptes.txt";
             fichierDatabaseContactsHisto= dossierDatabase+"/"+"historiquecontacts.txt";
             
            urlDatabase = fichierDatabaseContacts;
            
            outExiste = true; //sera forcé false si n'existe pas
            try {
                in = new FileReader(fichierConfig); // pour savoir s'il existe ou non
            } catch (IOException ioe) {
                outExiste = false;
                javax.swing.JOptionPane.showMessageDialog(null,
                        "\nLe fichier " + fichierConfig + " n'existe pas:\n"
                        + "Nous allons le créer.");
                try {
                    out = new FileWriter(fichierConfig);
                    outFileBatch= new FileWriter(fichierBatch);
                    outImageFileBatch = new FileWriter(fichierBatchImage);
                    outFile =new FileWriter(fichierDatabaseContacts);
                    outFileDb = new FileWriter(fichierDatabaseComptes);
                    outFileCompteHisto= new FileWriter(fichierDatabaseCompteHisto);
                    outFileContactsHisto= new FileWriter(fichierDatabaseContactsHisto);
                    outFileDb.write("Gmail;Google - mail;C:\\IceDatabase\\Carnetdb\\icons\\logoGmail.png;Messagerie; 3w.google.com;? - ?;? - ?;patricknoah2010@gmail.com;Pbgvaxlmxk;Cesar;19;0;Winchester"); // on le crée vide dans cet exemple
                    outFile.write("Patrick;NOAH;C:\\IceDatabase\\Carnetdb\\icons\\logoAdmin.PNG;6 - 00 - 00 - 00 - 00; 6 - 53 - 58 - 26 - 10;6 - 00 - 00 - 00 - 00;6 - 96 - 39 - 42 - 78;patricknoah2010@gmail.com;Pitoare;Maroua;20 - Mai;Admin;Analyste Programmeur;20;Mai"); // on le crée vide dans cet exemple
                    out.write( getLogin()+" "+getMotdepasse()+" "+getDatabase()+" "+getDatabaseChoisie()); // on le crée vide dans cet exemple
                    outFileBatch.write("@echo off\n" +
                                                                            "rem +\n" +
                                                                            "rem Transfert Image Logo.cmd\n" +
                                                                            "rem -\n" +
                                                                            "echo Bonjour Patrick-Noah !!!!\n" +
                                                                            "copy %USERPROFILE%\\Documents\\NetBeansProjects\\IceBook-1.0.3\\src\\dossierImages\\* C:\\IceDatabase\\Carnetdb\\icons\\\n" +
                                                                            "exit");
                    
                    
           outImageFileBatch.write("@echo off\n" +
                                                                            "rem +\n" +
                                                                            "rem Transfert Image.cmd\n" +
                                                                            "rem -\n" +
                                                                            "echo Bonjour Patrick-Noah !!!!\n" + 
                                                                            "exit");      
                    
                } catch (IOException ioe2) {
                    libFin = ioe2.toString().substring(31) + "\n\nÉCRITURE IMPOSSIBLE:\n"
                            //+ "(Le fichier " + fichierConfig + "\nest vraisemblablement en lecture seule).\n"
                            + "FIN.\n\n"
                            + "Remarques:\n\n"
                            + "-Voir le texte de la première ligne de ce message entre ().\n";
                }
            } 
            
            if (out != null && outFile!=null && outFileDb!=null && outFileCompteHisto!=null && outFileContactsHisto!=null) {
                try {
                    out.close();
                    outFile.close();
                    outFileDb.close();
                    outFileCompteHisto.close();
                    outFileContactsHisto.close();
                    outFileBatch.close();
                    outImageFileBatch.close();
                    telechargerImage("transfertImage.bat"); //telechargement de l'image dans le repertoire
                } catch (IOException ioe) {
                    System.out.println("Erreur: " + ioe.toString());
                }
            }
        }
        else{
            urlDatabase = dossierDatabase + "/" + "iceConfigdb.txt";
        }
    }
 
    
     public void telechargerImage(String monTransfert){
         Process p = null;
    try {
        p = Runtime.getRuntime().exec("cmd /c start C:/IceDatabase/Carnetdb/config/"+monTransfert);
    } catch (IOException ex) {
        Logger.getLogger(Configurations.class.getName()).log(Level.SEVERE, null, ex);
    }
    InputStream in = p.getInputStream();
    OutputStream out = p.getOutputStream(); 
    
    }
    
     
    
    public String getLogin() {
        return login;
    }
    
    public void setLogin(String login) {
        this.login = login;
    }
    
    public String getMotdepasse() {
        return motdepasse;
    }
    
    public void setMotdepasse(String motdepasse) {
        this.motdepasse = motdepasse;
    }
    
    public String getPwdSaisie() {
        return pwdSaisie;
    }
    
    public void setPwdSaisie(String pwdSaisie) {
        this.pwdSaisie = pwdSaisie;
    }
    
    public String getLoginSaisie() {
        return loginSaisie;
    }
    
    public void setLoginSaisie(String loginSaisie) {
        this.loginSaisie = loginSaisie;
    }
    public String getUrlDatabase() {
        return urlDatabase;
    }
    
    public void setUrlDatabase(String urlDatabase) {
        this.urlDatabase = urlDatabase;
    }

   private void centerEcran(String title) {
        Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension dimensionEcran = kit.getScreenSize();
        int largeur = dimensionEcran.width;
        int hauteur = dimensionEcran.height;
        setTitle(title);
        setBounds((largeur-445)/2,(hauteur-325)/2, 445,325);
        setResizable(false);
    }
}
