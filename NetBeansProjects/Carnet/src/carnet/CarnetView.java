/*
 * CarnetView.java
 */

package carnet;

import com.shelby.carnet.carnetUtils.Fichier;
import java.awt.Color;
import java.awt.Dimension;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.border.Border;

/**
 * The application's main frame.
 */
public class CarnetView extends FrameView {
private final Border cadre;
    private int numero;
    private int numeroPrec;
    private int totalComptes=0;
    private SaisieComptes saisieDialogComptes;
    private Comptes[] listeComptes;
    //private ComptesSupMultiple[] listeComptesSup;
    private int nbreClics=0;
    int[] tabFinalNbre= new int[1000];
    private int tailleTabFinalSuprimer;
    boolean selectionMultiple=false;
    private boolean jeSelectionneTous;//pour clarifier le type de suppression
    DatabaseTxt txtDb = new DatabaseTxt();
    String databaseCompteUrl =txtDb.getDatabaseCompteUrl();
    
    
    
   public CarnetView(SingleFrameApplication app) {
        super(app);

        initComponents();
        initComptes();
        totalComptes();
        
        cadre = BorderFactory.createLineBorder(Color.RED);
        
        
        
        

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = CarnetApp.getApplication().getMainFrame();
            aboutBox = new CarnetAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        CarnetApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        boiteGlobale = new javax.swing.JPanel();
        boiteAvecScroll = new javax.swing.JPanel();
        scrollComptes = new javax.swing.JScrollPane();
        boiteComptes = new javax.swing.JPanel();
        boiteInfosCpts = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        addBtn = new javax.swing.JButton();
        delBtn = new javax.swing.JButton();
        numerosCptsLbl = new javax.swing.JLabel();
        totalnumerosCptsLbl = new javax.swing.JLabel();

        mainPanel.setName("mainPanel"); // NOI18N

        boiteGlobale.setName("boiteGlobale"); // NOI18N
        boiteGlobale.setLayout(new java.awt.GridLayout(1, 0));

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(carnet.CarnetApp.class).getContext().getResourceMap(CarnetView.class);
        boiteAvecScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("boiteAvecScroll.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("LM Roman Dunhill 10", 0, 24), new java.awt.Color(0, 0, 153))); // NOI18N
        boiteAvecScroll.setFont(new java.awt.Font("LM Roman Dunhill 10", 0, 15)); // NOI18N
        boiteAvecScroll.setName("boiteAvecScroll"); // NOI18N

        scrollComptes.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollComptes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        scrollComptes.setFont(new java.awt.Font("Palatino Linotype", 0, 14)); // NOI18N
        scrollComptes.setName("scrollComptes"); // NOI18N

        boiteComptes.setFont(new java.awt.Font("Palatino Linotype", 0, 12)); // NOI18N
        boiteComptes.setName("boiteComptes"); // NOI18N

        javax.swing.GroupLayout boiteComptesLayout = new javax.swing.GroupLayout(boiteComptes);
        boiteComptes.setLayout(boiteComptesLayout);
        boiteComptesLayout.setHorizontalGroup(
            boiteComptesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 577, Short.MAX_VALUE)
        );
        boiteComptesLayout.setVerticalGroup(
            boiteComptesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 529, Short.MAX_VALUE)
        );

        scrollComptes.setViewportView(boiteComptes);

        javax.swing.GroupLayout boiteAvecScrollLayout = new javax.swing.GroupLayout(boiteAvecScroll);
        boiteAvecScroll.setLayout(boiteAvecScrollLayout);
        boiteAvecScrollLayout.setHorizontalGroup(
            boiteAvecScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollComptes, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
        );
        boiteAvecScrollLayout.setVerticalGroup(
            boiteAvecScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollComptes, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
        );

        boiteGlobale.add(boiteAvecScroll);

        boiteInfosCpts.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("boiteInfosCpts.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("LM Roman Dunhill 10", 1, 24), resourceMap.getColor("boiteInfosCpts.border.titleColor"))); // NOI18N
        boiteInfosCpts.setName("boiteInfosCpts"); // NOI18N
        boiteInfosCpts.setLayout(new java.awt.BorderLayout());
        boiteGlobale.add(boiteInfosCpts);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(boiteGlobale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(boiteGlobale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(carnet.CarnetApp.class).getContext().getActionMap(CarnetView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        addBtn.setFont(new java.awt.Font("LM Roman Dunhill 10", 0, 18)); // NOI18N
        addBtn.setText(resourceMap.getString("addBtn.text")); // NOI18N
        addBtn.setToolTipText(resourceMap.getString("addBtn.toolTipText")); // NOI18N
        addBtn.setName("addBtn"); // NOI18N

        delBtn.setFont(new java.awt.Font("LM Roman Dunhill 10", 0, 18)); // NOI18N
        delBtn.setText(resourceMap.getString("delBtn.text")); // NOI18N
        delBtn.setToolTipText(resourceMap.getString("delBtn.toolTipText")); // NOI18N
        delBtn.setName("delBtn"); // NOI18N

        numerosCptsLbl.setBackground(java.awt.Color.white);
        numerosCptsLbl.setFont(new java.awt.Font("LM Roman Dunhill 10", 0, 15)); // NOI18N
        numerosCptsLbl.setText(resourceMap.getString("numerosCptsLbl.text")); // NOI18N
        numerosCptsLbl.setName("numerosCptsLbl"); // NOI18N
        numerosCptsLbl.setOpaque(true);

        totalnumerosCptsLbl.setBackground(java.awt.Color.white);
        totalnumerosCptsLbl.setFont(new java.awt.Font("LM Roman Dunhill 10", 0, 15)); // NOI18N
        totalnumerosCptsLbl.setForeground(resourceMap.getColor("totalnumerosCptsLbl.foreground")); // NOI18N
        totalnumerosCptsLbl.setText(resourceMap.getString("totalnumerosCptsLbl.text")); // NOI18N
        totalnumerosCptsLbl.setName("totalnumerosCptsLbl"); // NOI18N
        totalnumerosCptsLbl.setOpaque(true);

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addComponent(delBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(numerosCptsLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalnumerosCptsLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusAnimationLabel)
                        .addContainerGap())))
        );

        statusPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {numerosCptsLbl, totalnumerosCptsLbl});

        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(delBtn)
                    .addComponent(numerosCptsLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalnumerosCptsLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        statusPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {numerosCptsLbl, totalnumerosCptsLbl});

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JPanel boiteAvecScroll;
    private javax.swing.JPanel boiteComptes;
    private javax.swing.JPanel boiteGlobale;
    private javax.swing.JPanel boiteInfosCpts;
    private javax.swing.JButton delBtn;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel numerosCptsLbl;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JScrollPane scrollComptes;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JLabel totalnumerosCptsLbl;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;

    private void initComptes() {
       Dimension taille ;
        String chaine;
        String [] info = new String[8];
        listeComptes = new Comptes[50];
        Fichier fic = new Fichier(); fic.ouvrirEnLecture(databaseCompteUrl);
        int i = 0;
        do{
            chaine = fic.lire();
            if (chaine != null) {
                info = fic.extraireDonnees(chaine);
                listeComptes[i]  = new Comptes(info, i);
                taille = listeComptes[i].getPreferredSize();
                listeComptes[i].setBounds(0, i*(taille.height+2), taille.width, taille.height);
                boiteComptes.add(listeComptes[i]);
                taille.setSize(taille.width, (i+1)*(taille.height+2));
                boiteComptes.setPreferredSize(taille);
                boiteComptes.validate();
                
                //                    Mise en place d'un mouse listner pour naviger a l'aide de la
                //                    sourie sur les differents contacts
                
                listeComptes[i].addMouseListener(new java.awt.event.MouseAdapter() {
                    @Override
                    public void mouseReleased(java.awt.event.MouseEvent evt) { comptesMouseReleased(evt);}
                });
                i++;
            }
        } while (chaine != null);
        fic.fermer();
        //affiche les infos du  contact N°1
        boiteInfosCpts.add(new ComptesInfos(listeComptes[0].getListeInfos())) ;
        boiteInfosCpts.validate();
    }
    /**
     * Cette methode Permet de realiser la selection de chaque Comptes tout
     * ceci en se servant de notre sourie d'ou le MouseRelease
     */
    private void comptesMouseReleased(MouseEvent evt) {
        numeroPrec = numero;
        Comptes compteSelectionne = (Comptes) evt.getSource();
        numero = compteSelectionne.getId();
        setNumero(numero);
        ComptesInfos info= new ComptesInfos(listeComptes[numero].getListeInfos());
        numerosCptsLbl.setText(Integer.toString(getNumero()+1));
        boiteInfosCpts.add(new ComptesInfos(listeComptes[numero].getListeInfos())) ;
        listeComptes[numero].setBorder(cadre);
        
        if(numero== numeroPrec){//Lorsque l'on double clic sur un contact
            listeComptes[numeroPrec].setBorder(cadre);
            listeComptes[numeroPrec].setBackground(Color.RED);
        }
        else{ listeComptes[numeroPrec].setBorder(null);
        listeComptes[numeroPrec].setBackground(null);
        }
        
        boiteInfosCpts.validate();
    }

    private void totalComptes() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

       //----------------------------------debut ACCESSEURS ET MODIFICATEURS ------------------------------
    /**
     * Accesseur et modificateur de Numero pour nous permetre de connaitre
     * les differentes numero ainsi que le total d'enregistrement
     */
    public int getNumero() {
        return numero;
    }
    public void setNumero(int numero) {
        this.numero = numero;
    }
    /**
     * Accesseur et modificateur de Numero pour nous permetre de connaitre
     * la taille du tableau contenant le elements a supprimer
     */
    public int getTailleTabFinalSuprimer() {
        return tailleTabFinalSuprimer;
    }
    public void setTailleTabFinalSuprimer(int tailleTabFinalSuprimer) {
        this.tailleTabFinalSuprimer = tailleTabFinalSuprimer;
    }
    
    //----------------------------------fin ACCESSEURS ET MODIFICATEURS ------------------------------

}
